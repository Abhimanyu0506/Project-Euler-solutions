**Problem Statement:**

Each new term in the Fibonacci sequence is generated by adding the previous two terms.  
By starting with 1 and 2, the first 10 terms will be:

`1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...`

By considering the terms in the Fibonacci sequence whose values do not exceed four million,  
**find the sum of the even-valued terms.*

SOLUTION:

if we do it with python 

def even_fib_sum(limit):
    a, b = 1, 2
    total = 0

    while b <= limit:
        if b % 2 == 0:
            total += b
        a, b = b, a + b  # Move to next Fibonacci number

    return total

print(even_fib_sum(4000000))  # Output: 4613732



for alternative mathematical solution 


Step 1: Understand the Pattern

In the Fibonacci sequence:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

We observe that **every third Fibonacci number is even**:

2, 8, 34, 144, 610, ...

Let’s denote these even terms as a separate sequence `E(n)`:
- E(1) = 2
- E(2) = 8
- E(3) = 34

Step 2: Derive a Recurrence for Even Fibonacci Numbers

We observe:
- E(3) = 4 × E(2) + E(1) = 4×8 + 2 = 34
- E(4) = 4 × E(3) + E(2) = 4×34 + 8 = 144  
- So the recurrence is:

E(n) = 4 × E(n-1) + E(n-2)

Step 3: Generate Even Fibonacci Numbers ≤ 4,000,000

Start with:
- E(1) = 2
- E(2) = 8

Continue using the recurrence until the term exceeds 4,000,000:

E(3) = 34
E(4) = 144
E(5) = 610
E(6) = 2584
E(7) = 10946
E(8) = 46368
E(9) = 196418
E(10) = 832040
E(11) = 3524578
E(12) = 14930352 → (Too large, stop at E(11))

Step 4: Sum the Even Fibonacci Numbers

Sum = 2 + 8 + 34 + 144 + 610 + 2584 + 10946 + 46368 + 196418 + 832040 + 3524578
= 4613732

